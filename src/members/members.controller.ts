import { Controller, Get, Param, Patch, Body, UseGuards, Request  } from '@nestjs/common';
import { MembersService } from './members.service';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';

@Controller('members')
export class MembersController {
  constructor(private readonly membersService: MembersService) {}

  /** üìå L·∫•y danh s√°ch t·∫•t c·∫£ th√†nh vi√™n (ch·ªâ Admin) */
  @UseGuards(JwtAuthGuard)
  @Get('collectors')
  async getAllMembers(@Request() req) {
    return this.membersService.getAllMembers(req.user.sub);
  }

  /**  L·∫•y th√¥ng tin m·ªôt th√†nh vi√™n theo ID */
  @UseGuards(JwtAuthGuard)
  @Get(':id')
  async getMemberById(@Param('id') id: string) {
    return this.membersService.getMemberById(id);
  }

  /** C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n (ch·ªâ ch√≠nh user ƒë√≥ c√≥ quy·ªÅn ch·ªânh s·ª≠a) */
  @UseGuards(JwtAuthGuard)
  @Patch(':id')
  async updateMember(@Param('id') id: string, @Body() updateData: Partial<any>) {
    return this.membersService.updateMember(id, updateData);
  }
  /**  X√≥a m·ªÅm User (ch·ªâ Admin m·ªõi x√≥a ƒë∆∞·ª£c) */
  @UseGuards(JwtAuthGuard)
  @Patch('delete/:userId')
  async softDeleteUser(@Request() req, @Param('userId') userId: string) {
    return this.membersService.softDeleteUser(req.user.sub, userId);
  }

  /**  ƒê·ªïi role th√†nh Admin (ch·ªâ Admin m·ªõi c√≥ quy·ªÅn) */
  @UseGuards(JwtAuthGuard)
  @Patch('promote/:userId')
  async promoteToAdmin(@Request() req, @Param('userId') userId: string) {
    return this.membersService.promoteToAdmin(req.user.sub, userId);
  }
}
