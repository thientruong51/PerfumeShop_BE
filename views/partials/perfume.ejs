<button class="button is-primary mb-4" id="addPerfumeBtn">Add Perfume</button>
<table class="table is-fullwidth">
  <thead>
    <tr>
      <th>Image</th><th>Name</th><th>Brand</th><th>Concentration</th><th>Ingredients</th>
      <th>Description</th><th>Target Audience</th><th>Price</th><th>Volume</th><th>Actions</th>
    </tr>
  </thead>
  <tbody id="perfumesTable">
    <% perfumes.forEach(perfume => { %>
      <tr data-id="<%= perfume._id %>">
        <td><img src="<%= perfume.uri %>" alt="<%= perfume.perfumeName %>" class="image is-64x64"></td>
        <td><%= perfume.perfumeName %></td>
        <td><%= perfume.brand %></td>
        <td><%= perfume.concentration %></td>
        <td><%= perfume.ingredients %></td>
        <td><%= perfume.description %></td>
        <td><%= perfume.targetAudience %></td>
        <td><%= perfume.price %></td>
        <td><%= perfume.volume %> ml</td>
        <td>
          <button class="button is-small is-info editPerfumeBtn">Edit</button>
          <button class="button is-small is-danger deletePerfumeBtn">Delete</button>
        </td>
      </tr>
    <% }) %>
  </tbody>
</table>
<!-- Modal Perfume -->
<div class="modal" id="perfumeModal">
  <div class="modal-background closeModal"></div>
  <div class="modal-card">
    <header class="modal-card-head">
      <p class="modal-card-title">Add/Edit Perfume</p>
      <button class="delete closeModal" aria-label="close"></button>
    </header>
    <section class="modal-card-body">
      <input type="hidden" id="perfumeId">
      <input type="text" id="perfumeName" class="input mb-2" placeholder="Perfume Name">
      <input type="text" id="perfumeUri" class="input mb-2" placeholder="Image URI">
      <input type="text" id="perfumeBrand" class="input mb-2" placeholder="Brand Name">
      <input type="number" id="perfumePrice" class="input mb-2" placeholder="Price">
      <input type="text" id="perfumeConcentration" class="input mb-2" placeholder="Concentration">
      <input type="text" id="perfumeDescription" class="input mb-2" placeholder="Description">
      <input type="text" id="perfumeIngredients" class="input mb-2" placeholder="Ingredients">
      <input type="number" id="perfumeVolume" class="input mb-2" placeholder="Volume (ml)">
      <input type="text" id="perfumeTargetAudience" class="input mb-2" placeholder="Target Audience">
      
    </section>
    <footer class="modal-card-foot">
      <button class="button is-success" id="savePerfumeBtn">Save</button>
      <button class="button cancelModal">Cancel</button>
    </footer>
  </div>
</div>


<script>
 document.addEventListener('DOMContentLoaded', async () => {
   
    const modals = {
        perfume: document.getElementById('perfumeModal')
    };

    const openModal = (type) => modals[type]?.classList.add('is-active');
    const closeModals = () => Object.values(modals).forEach(modal => modal.classList.remove('is-active'));

    document.querySelectorAll('.closeModal, .cancelModal').forEach(btn => {
        btn.addEventListener('click', closeModals);
    });

   
    const resetForm = (fields) => {
        fields.forEach(id => {
            const element = document.getElementById(id);
            if (element) element.value = '';
        });
    };

    const fillForm = (data) => {
        Object.entries(data).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) element.value = value;
        });
    };

    const fetchAllPerfumes = async () => {
    try {
        let allPerfumes = [];
        let page = 1;
        let totalPages = 1;

        do {
            const response = await fetch(`/perfumes?page=${page}&limit=50`, { credentials: 'include' });

            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

            const result = await response.json();

            if (!result.data?.data || !Array.isArray(result.data.data)) {
                throw new Error("Invalid data format from API");
            }

            allPerfumes = [...allPerfumes, ...result.data.data]; 
            totalPages = result.data.totalPages;
            page++;
        } while (page <= totalPages);

        console.log(" Loaded full perfume list:", allPerfumes);
        return allPerfumes;
    } catch (error) {
        console.error(" Fetch all perfumes error:", error);
        alert("Error loading country list!");
        return [];
    }
};



    const updateTable = async () => {
    const perfumes = await fetchAllPerfumes();
    if (!Array.isArray(perfumes)) {
        console.error(' Data received is not an array:', perfumes);
        return;
    }

    const tbody = document.getElementById('perfumesTable');
    tbody.innerHTML = perfumes.map(perfume => `
        <tr data-id="${perfume._id}">
            <td><img src="${perfume.uri}" alt="${perfume.perfumeName}" class="image is-64x64"></td>
            <td>${perfume.perfumeName}</td>
            <td>${perfume.brand}</td>
            <td>${perfume.concentration}</td>
            <td>${perfume.ingredients}</td>
            <td>${perfume.description}</td>
            <td>${perfume.targetAudience}</td>
            <td>${perfume.price}</td>
            <td>${perfume.volume} ml</td>
            <td>
                <button class="button is-small is-info editPerfumeBtn">Edit</button>
                <button class="button is-small is-danger deletePerfumeBtn">Delete</button>
            </td>
        </tr>
    `).join('');

    attachEventListeners();
};


    const handleDelete = async (id) => {
        if (!confirm('Are you sure you want to delete this perfume??')) return;
        try {
            const response = await fetch(`/perfumes/${id}`, {
                method: 'DELETE',
                credentials: 'include' 
            });
            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
            alert('Xóa thành công!');
            updateTable();
        } catch (error) {
            console.error('❌ Delete error:', error);
            alert('Error deleting, please try again!');
        }
    };

    const handleSave = async () => {
        const id = document.getElementById('perfumeId')?.value;
        const payload = {
            perfumeName: document.getElementById('perfumeName')?.value || '',
            uri: document.getElementById('perfumeUri')?.value || '',
            price: Number(document.getElementById('perfumePrice')?.value) || 0,
            concentration: document.getElementById('perfumeConcentration')?.value || '',
            description: document.getElementById('perfumeDescription')?.value || '',
            ingredients: document.getElementById('perfumeIngredients')?.value || '',
            volume: Number(document.getElementById('perfumeVolume')?.value) || 0,
            targetAudience: document.getElementById('perfumeTargetAudience')?.value || '',
            brand: document.getElementById('perfumeBrand')?.value || ''
        };

        try {
            const response = await fetch(id ? `/perfumes/${id}` : '/perfumes', {
                method: id ? 'PUT' : 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify(payload)
            });

            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

            const result = await response.json();
            alert(result.message);
            closeModals();
            updateTable();
        } catch (error) {
            console.error(' Fetch error:', error);
            alert('Error sending request, please try again!');
        }
    };

    const attachEventListeners = () => {
        document.querySelectorAll('.editPerfumeBtn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const row = e.target.closest('tr');
                fillForm({
                    perfumeId: row.dataset.id,
                    perfumeUri: row.children[0].querySelector('img').src,
                    perfumeName: row.children[1].innerText,
                    perfumeBrand: row.children[2].innerText,
                    perfumeConcentration: row.children[3].innerText,
                    perfumeIngredients: row.children[4].innerText,
                    perfumeDescription: row.children[5].innerText,
                    perfumeTargetAudience: row.children[6].innerText,
                    perfumePrice: row.children[7].innerText,
                    perfumeVolume: parseInt(row.children[8].innerText)
                });
                openModal('perfume');
            });
        });

        document.querySelectorAll('.deletePerfumeBtn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const id = e.target.closest('tr')?.dataset.id;
                if (id) handleDelete(id);
            });
        });
    };

    document.getElementById('addPerfumeBtn')?.addEventListener('click', () => {
        resetForm([
            'perfumeId', 'perfumeName', 'perfumeUri', 'perfumePrice', 'perfumeConcentration',
            'perfumeDescription', 'perfumeIngredients', 'perfumeVolume', 'perfumeTargetAudience', 'perfumeBrand'
        ]);
        openModal('perfume');
    });

    document.getElementById('savePerfumeBtn')?.addEventListener('click', handleSave);

    await updateTable(); 
});


</script>
